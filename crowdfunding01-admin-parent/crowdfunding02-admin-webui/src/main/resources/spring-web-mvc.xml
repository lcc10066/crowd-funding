<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">


<!--  扫描handler  -->
    <context:component-scan base-package="com.crowd.mvc"/>

<!--  springmvc注解驱动-->
    <mvc:annotation-driven></mvc:annotation-driven>

<!--  视图解析器  -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

<!--  view-controller, interceptor,exception...  -->



<!--  两种异常处理器
            1. 基于XML配置的异常处理     只能处理访问mvc:view-controller表示的handler所跑出的异常
            2. 基于注解的异常处理        只能处理访问注解表示的handler所抛出的异常
       功能：统一管理项目中的异常 抛出异常  显示异常信息
            普通请求：在页面上显示异常信息
            Ajax 请求：返回 JSON 数据
  -->
<!--    1. 基于配置的异常处理  -->
<!--
    SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver
        HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和  SimpleMappingExceptionResolver
        SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver
-->

    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" id="simpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
<!--                键表示处理器方法执行过程中出现的异常    值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面  -->
<!--                注意：：：：  此处的view在跳转时也会拼接视图前后缀-->
                <prop key="java.lang.Exception">system-error</prop>
                <prop key="com.crowd.exception.AccessForbiddenException">admin-login</prop>
                <prop key="com.crowd.exception.LoginAcctAlreadyInUseException">admin-add</prop>
            </props>
        </property>
<!--    exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享  eg: system-error 中的：${requestScope.exception.message}   -->
        <property name="exceptionAttribute" value="exception"></property>
    </bean>

<!--     2. 基于注解的异常处理    -->
<!--    @ControllerAdvice-->
<!--    public class CrowdExceptionResolver {-->

<!--    @ExceptionHandler(value = NullPointerException.class)-->
<!--    public ModelAndView resolveNullPointerException(-->
<!--    NullPointerException exception,  // exception表示当前请求处理中出现的异常对象-->
<!--    HttpServletRequest request,-->
<!--    HttpServletResponse response){-->
<!--        ......-->
<!--    }-->

    <mvc:default-servlet-handler></mvc:default-servlet-handler>

    <!-- 只有视图转换功能的handler 直接用XML标签写-->
    <!--    <mvc:view-controller path="/xxx/xxx.html" view-name="target"></mvc:view-controller>-->
    <mvc:view-controller path="/admin/to/login/page.html" view-name="admin-login"></mvc:view-controller>
    <mvc:view-controller path="/admin/to/main/page.html" view-name="admin-main"></mvc:view-controller>
    <mvc:view-controller path="/admin/to/add/page.html" view-name="admin-add"></mvc:view-controller>
    <mvc:view-controller path="/role/to/page.html" view-name="role-page"></mvc:view-controller>
    <mvc:view-controller path="/menu/to/page.html" view-name="menu-page"></mvc:view-controller>

<!--  注册拦截器  -->

<!--   使用springsecurity后不需要再使用原来的自定义登录拦截器
    <mvc:interceptors>
        <mvc:interceptor>
             /*对应一层路径，比如：/aaa
             /**对应多层路径，比如：/aaa/bbb或/aaa/bbb/ccc或/aaa/bbb/ccc/ddd
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/admin/to/login/page.html"/>
            <mvc:exclude-mapping path="/admin/do/logout.html" />
            <mvc:exclude-mapping path="/admin/do/login.html" />

            <bean class="com.crowd.mvc.interceptor.LoginInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

-->

</beans>